// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    DEV_FRONT
    DEV_BACK
    DEV_FULLSTACK
    DEV_OPS
    UI_DESIGNER
    UX_DESIGNER
}

model User {
    id                   String    @id @default(cuid())
    name                 String?
    email                String?   @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    role                 Role?
    description          String?   @db.Text
    links                String[]
    createdProjects      Project[] @relation("createdProjects")
    joinedProjects       Project[] @relation("joinedProjects")
    interestedByProjects Project[] @relation("interstedInProjects")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Status {
    DRAFT
    IN_PROGRESS
    FINISHED
}

model Project {
    id              String @id @default(cuid())
    title           String
    description     String
    creator         User   @relation("createdProjects", fields: [creatorId], references: [id])
    creatorId       String
    neededRoles     Role[]
    joinedBy        User[] @relation("joinedProjects")
    interestedUsers User[] @relation("interstedInProjects")
    status          Status
}
